import collectable.*
import main_character.*
import backpack.*
import extras.*
import mosquito.*
import navigation.*
import randomizer.*
import posiciones.*
import obstacles.*
import wollok.game.*

describe "uso de collectables" {

	method initialize() {
		game.clear()
		mainCharacter.build()
	}

	test "usar el spray, equipar el spray, matar mosquitos" {
		mainCharacter.position(game.at(1, 3))
		mainCharacter.direction(rightDirection)
		mainCharacter.disparar() // main character dispara su spray que ya tiene una carga equipada de 4 disparos
		assert.equals(3, insecticide.shoots()) // deben quedar 3 disparos
		insecticide.recargar() // se recarga spray
		assert.equals(4, insecticide.shoots()) // vuelve a tener 4 disparos
		const mH1 = new MosquitoHard(position = game.at(2, 3)) // se crea un Mosquito
		game.addVisual(mH1)
		mH1.moving()
		mosquitoesManager.mosquitoes().add(mH1)
		backpack.mosquitoes(0) // inicialmente la mochila tiene cero mosquitos muertos para analizar.
		mainCharacter.disparar() // main character dispara en la direccion al mosquito creado que lo tiene al alcance.
		assert.equals(3, insecticide.shoots()) // se descuenta un disparo de su spray
		assert.equals(#{}, mosquitoesManager.mosquitoes()) // el mosquito fue eliminado
		assert.equals(1, backpack.mosquitoes()) // la mochila tiene un mosquito para analizar guardado.
	}

	test "perder una vida y recuperar con el uso de vacuna" {
		const mS1 = mosquitoFactory.create() // se crea un mosquito soft
		const mH1 = mosquitoHardFactory.create() // se crea un mosquito hard
		mS1.position(game.at(3, 2)) // se ubica el mosquito soft a un casillero a la derecha del main character
		game.addVisual(mS1)
		mS1.moving()
		mosquitoesManager.mosquitoes().add(mS1)
		mH1.position(game.at(2, 3)) // se ubica el mosquito hard un casillero arriba del main character
		game.addVisual(mH1)
		mH1.moving()
		mosquitoesManager.mosquitoes().add(mH1)
		assert.equals(#{ mS1, mH1 }, mosquitoesManager.mosquitoes()) // verifico que ambos mosquitos estén en la colección
		mainCharacter.position(game.at(3, 2)) // main character se mueve a la posición del mosquito soft
		assert.equals([ mainCharacter, mS1 ], game.getObjectsIn(game.at(3, 2)).asList()) // verifico que estén en el mismo casillero el mosquito soft y el main character
		mS1.collision() // el mosquito soft colisiona con el main character (lo pica y muere el mosquito) 
		assert.equals(#{ mH1 }, mosquitoesManager.mosquitoes()) // verifico que en la colección de mosquitos del game sólo esté el mosquito hard.
		assert.equals(1, mainCharacter.lifes()) // verifico que el main character ahora tiene una vida menos (1).
		const v1 = new Vaccine() // se crea una vacuna
		game.addVisual(v1)
		v1.collision() // cuando colisiona con el main character, éste recupera una vida.
		assert.equals(2, mainCharacter.lifes()) // verifico que el main character tiene 2 vidas nuevamente.
		const mS2 = mosquitoFactory.create() // se crea otro mosquito soft 
		game.addVisual(mS2)
		mS2.moving()
		mosquitoesManager.mosquitoes().add(mS2)
		assert.equals(#{ mH1, mS2 }, mosquitoesManager.mosquitoes()) // verifico que ambos mosquitos están en la lista de mosquitos del game
		mH1.collision() // el mosquito hard colisiona con el main character (lo pica y muere el mosquito) 
		assert.equals(#{ mS2 }, mosquitoesManager.mosquitoes()) // verifico que en la colección de mosquitos del game sólo esté el mosquito soft último creado.
		assert.equals(1, mainCharacter.lifes()) // verifico que el main character ahora tiene una vida menos (1).
		assert.that(mainCharacter.estaInvertido()) // verifico que el main character ahora tiene la movilidad invertida
		mS2.collision() // el mosquito soft colisiona con el main character (lo pica y muere el mosquito) 
		assert.equals(#{ }, mosquitoesManager.mosquitoes()) // verifico que ya no hay mosquitos en la colección del game
		assert.equals(0, mainCharacter.lifes()) // verifico que el main character tiene 0 vidas.
		assert.equals(3, mainCharacter.bites()) // verifico que el main character acumula 3 picaduras.
		assert.that(!game.hasVisual(mainCharacter)) // main character ha muerto, por lo tanto no debe estar en el tablero
	}

//
//	test "usar los espirales y matar mosquitos" {
//	}
//
//	test "recolectar mosquitos, basura, cajas de spirales" {
//	}
}

